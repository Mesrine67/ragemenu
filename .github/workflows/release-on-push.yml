name: Build and Release

# Trigger on push to main branch or manual trigger
on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger from GitHub UI

permissions:
  contents: write  # Ensure that the workflow has write permissions

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Node.js environment for npm
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'  # Updated to Node.js version 20

      # Install npm dependencies
      - name: Install dependencies
        working-directory: ./web
        run: npm install

      # Build the project
      - name: Build project
        working-directory: ./web
        run: npm run build

      # List contents of the dist folder to check for Lua files
      - name: List dist folder contents
        run: ls -R ./web/dist  # List all files in the dist directory

      # Get the latest release tag
      - name: Get latest release
        id: get_latest_release
        run: |
          # Get the latest tag
          TAG=$(git tag | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
          echo "Latest tag: $TAG"
          if [ -z "$TAG" ]; then
            TAG="v1.0.0"  # Start with v1.0.0 if no tags exist
          fi
          echo "TAG=$TAG" >> $GITHUB_ENV

      # Increment the version
      - name: Increment version
        id: increment_version
        run: |
          # Remove the 'v' and split the version into parts
          IFS='.' read -r major minor patch <<< "${TAG:1}"
          patch=$((patch + 1))  # Increment the patch version
          NEW_TAG="v${major}.${minor}.${patch}"
          
          # Loop to find a new tag if the incremented tag already exists
          while git rev-parse "$NEW_TAG" >/dev/null 2>&1; do
            echo "Tag $NEW_TAG already exists. Incrementing patch..."
            patch=$((patch + 1))  # Increment the patch version
            NEW_TAG="v${major}.${minor}.${patch}"
          done
          
          echo "New unique tag: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      # Copy built artifacts to web folder
      - name: Copy dist folder to web
        run: |
          cp -R ./web/dist/* ./web/  # Copy everything from dist to web

      # Create a zip file of the updated web folder
      - name: Create zip file
        run: |
          cd ./web
          zip -r dist.zip .  # Zip all contents in the web folder
          cd ..  # Go back to the root directory

      # List contents of the zip file
      - name: List contents of the zip file
        run: unzip -l ./web/dist.zip  # List the contents of the zip file

      # Create a release
      - name: Create a Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}  # Use the new incremented tag
          release_name: Release ${{ env.NEW_TAG }}
          body: |
            Automatically generated release based on the push
          draft: false
          prerelease: false

      # Upload the built artifacts to the release
      - name: Upload Build Artifacts to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./web/dist.zip  # The zip file we just created
          asset_name: ragemenu.zip
          asset_content_type: application/zip
