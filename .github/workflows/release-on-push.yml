name: Build and Release

# Trigger on push to main branch or manual trigger
on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger from GitHub UI

permissions:
  contents: write  # Ensure that the workflow has write permissions

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Node.js environment for npm
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'  # Updated to Node.js version 20

      # Install npm dependencies
      - name: Install dependencies
        working-directory: ./web
        run: npm install

      # Build the project
      - name: Build project
        working-directory: ./web
        run: npm run build

      # Prepare the output directory
      - name: Prepare output directory
        run: |
          # Clear the existing web directory
          rm -rf ./web/*  # Remove all contents from the web directory

          # Copy the dist folder contents into the web directory
          cp -r ./web/dist/* ./web/  # Copy all contents from dist into web directory

      # Create a zip file of the ragemenu folder
      - name: Create zip file
        run: |
          mkdir -p ./ragemenu
          cd ./ragemenu
          zip -r ../ragemenu.zip .  # Zip all contents in the ragemenu folder
          cd ..  # Go back to the root directory

      # Get the commit message for the release name
      - name: Get commit message
        id: get_commit_message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Release name: $COMMIT_MESSAGE"
          echo "RELEASE_NAME=$COMMIT_MESSAGE" >> $GITHUB_ENV

      # Create a release
      - name: Create a Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "latest"  # Set tag name to "latest"
          release_name: ${{ env.RELEASE_NAME }}  # Use the commit message as the release name
          body: |
            Automatically generated release based on the push
          draft: false
          prerelease: false

      # Upload the built artifacts to the release
      - name: Upload Build Artifacts to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ragemenu.zip  # The zip file we just created
          asset_name: ragemenu.zip
          asset_content_type: application/zip
