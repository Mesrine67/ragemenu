name: Build and Release

# Trigger on push to main branch
on:
  push:
    branches:
      - main

permissions:
  contents: write  # Ensure that the workflow has write permissions

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Node.js environment for npm
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'  # Updated to Node.js version 20

      # Install npm dependencies
      - name: Install dependencies
        working-directory: ./web
        run: npm install

      # Build the project
      - name: Build project
        working-directory: ./web
        run: npm run build

      # Remove unnecessary files
      - name: Clean up unnecessary files
        run: |
          rm -rf ./web/node_modules
          rm -f ./web/package-lock.json

      # Create a zip file of the repository contents
      - name: Create zip file
        run: |
          ZIP_DIR="./${{ github.event.repository.name }}.zip"
          # Copy the entire repository excluding unnecessary files
          rsync -av --exclude='.git/' --exclude='node_modules/' --exclude='zip_content/' ./ $ZIP_DIR

      # Delete previous release if it exists
      - name: Delete previous release
        id: delete_release
        run: |
          # Get the latest release name and tag
          LATEST_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest)

          # Extract tag name
          TAG_NAME=$(echo $LATEST_RELEASE | jq -r .tag_name)

          # Check if a release exists
          if [ "$TAG_NAME" != "null" ]; then
            echo "Deleting release with tag: $TAG_NAME"
            curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/releases/$TAG_NAME

            # Delete the corresponding tag
            git push --delete origin $TAG_NAME
          else
            echo "No previous release found."
          fi

      # Get the commit message for the release name
      - name: Get commit message
        id: get_commit_message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Release name: $COMMIT_MESSAGE"
          echo "RELEASE_NAME=$COMMIT_MESSAGE" >> $GITHUB_ENV

      # Create a new release with tag "latest"
      - name: Create a Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "latest"  # Set tag name to "latest"
          release_name: ${{ env.RELEASE_NAME }}  # Use the commit message as the release name
          body: |
            Automatically generated release based on the push
          draft: false
          prerelease: false

      # Upload the zip file to the release
      - name: Upload Build Artifacts to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ github.event.repository.name }}.zip  # The zip file we just created
          asset_name: ${{ github.event.repository.name }}.zip  # Set asset name to the repository name
          asset_content_type: application/zip
